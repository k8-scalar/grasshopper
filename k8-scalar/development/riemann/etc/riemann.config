(use '(processor util scaler))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;   CONFIGURATION
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(logging/init {:console true})
(instrumentation {:enabled? false})
(periodically-expire 5)
(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (ws-server  {:host host})
)

(def ^:const SCALER_CONFIGURATION {
	:host "scaler"
	:port "8080"
})

(def ^:const RIEMANN_STRATEGY 
	(or (getenv-as-int "RIEMANN_STRATEGY") 1))
(def ^:const CASSANDRA_CPU_THRESHOLD
	(or (getenv-as-int "CASSANDRA_CPU_THRESHOLD") 1400))
(def ^:const CASSANDRA_CPU_LIMIT 
	(or (getenv-as-int "CASSANDRA_CPU_LIMIT") 2000))
(def ^:const CASSANDRA_CPU_DEVIATION 
	(or (getenv-as-int "CASSANDRA_CPU_DEVIATION") 100))
(def ^:const CASSANDRA_FILESYSTEM_THRESHOLD_PERCENTAGE 
	(or (getenv-as-int "CASSANDRA_FILESYSTEM_THRESHOLD_PERCENTAGE") 75))
(def ^:const CASSANDRA_FILESYSTEM_LIMIT 
	(or (getenv-as-int "CASSANDRA_FILESYSTEM_LIMIT") 5000000))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;   MAIN
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn processor-guard
	"Passes on events that violate the processor usage rules"
	[& children]
	(fn stream [event]
	(when-let [value (:metric event)]
		(when (< (- CASSANDRA_CPU_THRESHOLD (* CASSANDRA_CPU_LIMIT 0.05)) value)
			(call-rescue event children)
))))

(defn filesystem-guard
	"Passes on events that violate the filesystem usage rules"
	[& children]
	(fn stream [event]
	(when-let [value (/ (* (:metric event) 100.0) CASSANDRA_FILESYSTEM_LIMIT)]
		(when (< CASSANDRA_FILESYSTEM_THRESHOLD_PERCENTAGE value)
			(call-rescue event children)
))))

(defn strategy-one
	[& children]
	(where (and (labelled? event "technology" "cassandra") (service "cpu/usage_rate"))
			(over CASSANDRA_CPU_THRESHOLD
				(apply sdo children))
))

(defn strategy-two
	[& children]
	(where (labelled? event "technology" "cassandra") 
		(where (service "cpu/usage_rate")
			(processor-guard
				(apply sdo children)))
		(where (service "filesystem/usage")
			(filesystem-guard
				(apply sdo children)))
))

(defn strategy-three
	[& children]
	(where (labelled? event "technology" "cassandra") 
		(where (service "cpu/usage_rate")
			(moving-event-window 3 
				(smap folds/median
					(processor-guard 
						(apply sdo children)))))
		(where (service "filesystem/usage")
			(filesystem-guard
				(apply sdo children)))
))

(defn strategy-selector
	[strategy-id]
	(case strategy-id
		1 (partial strategy-one)
		2 (partial strategy-two)
		3 (partial strategy-three)
))

(streams prn
	(strategy-selector RIEMANN_STRATEGY
		; (tap :sink-reached
        (scaler-sink SCALER_CONFIGURATION)
)) ;)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;   TESTS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(tests (let [
	threshold-compliant-event {
		:service  "cpu/usage_rate"
		:host     "kube-worker-2"
		:pod_name "cassandra-0",
		:labels   "app:cassandra,technology:cassandra"
		:metric   500
	}
	threshold-violating-event {
		:service  "cpu/usage_rate"
		:host     "kube-worker-2"
		:pod_name "cassandra-0",
		:labels   "app:cassandra,technology:cassandra"
		:metric   1450
	}
	threshold-sometimes-violating-event {
		:service  "cpu/usage_rate"
		:host     "kube-worker-2"
		:pod_name "cassandra-0",
		:labels   "app:cassandra,technology:cassandra"
		:metric   1350
	}
	wrong-technology-event {
		:service  "cpu/usage_rate"
		:host     "kube-worker-2"
		:pod_name "my-mongodb-0",
		:labels   "app:my-mongo,technology:mongodb"
		:metric   5000
	}
	]

	; (deftest advanced-2-test
	; 	(is (= (inject! [threshold-compliant-event threshold-compliant-event threshold-violating-event]) {:sink-reached []}
	; )))

	; (deftest advanced-test
	; 	(is (= (inject! [threshold-compliant-event threshold-compliant-event threshold-violating-event threshold-violating-event]) {:sink-reached [threshold-violating-event]}
	; )))

	; (deftest threshold-complied-test
	; 	(is (= (inject! [threshold-compliant-event]) {:sink-reached []}
	; )))

	; (deftest threshold-sometimes-violated-test
	; 	(is (= (inject! [threshold-sometimes-violating-event]) {:sink-reached [threshold-sometimes-violating-event]}))
	; )

	; (deftest threshold-violated-test
	; 	(is (= (inject! [threshold-violating-event]) {:sink-reached [threshold-violating-event]}))
	; )

	; (deftest wrong-technology-test
	; 	(is (= (inject! [wrong-technology-event]) {:sink-reached []}
	; )))
))
